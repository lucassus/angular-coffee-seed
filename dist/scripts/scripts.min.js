(function(){var a,b;b=angular.module("myApp.alerts",["myApp.templates"]),a=function(){function a(a,b){var c=this;this.$scope=a,this.alerts=b,this.$scope.alertMessages=this.alerts.messages,this.$scope.disposeAlert=function(a){return c.alerts.dispose(a)}}return a.$inject=["$scope","alerts"],a}(),b.controller("alerts",a),b.factory("alerts",["$log","$timeout","alertTimeout",function(a,b,c){return{lastId:0,messages:[],nextId:function(){return this.lastId+=1},push:function(b,c){var d;return d=this.nextId(),a.info("Alert ["+d+", "+b+"]",c),this.messages.push({id:d,type:b,text:c}),this.delayedDispose(d),d},info:function(a){return this.push("info",a)},success:function(a){return this.push("success",a)},warning:function(a){return this.push("warning",a)},error:function(a){return this.push("error",a)},dispose:function(a){var b;return b=this.messages.map(function(a){return a.id}).indexOf(a),this.messages.splice(b,1)},delayedDispose:function(d){var e,f=this;return null!=c&&c>0?(e=function(){return a.info("Disposing alert",d,"after",c,"milliseconds"),f.dispose(d)},b(e,c)):void 0}}}]),b.directive("alerts",function(){return{restrict:"E",transclude:!0,templateUrl:"templates/partials/alerts.html",replace:!0,controller:"alerts"}})}).call(this),function(){var a;a=angular.module("myApp.navigation",[]),a.directive("navLinks",function(){return{restrict:"A",link:function(a,b){return a.$on("pathChanged",function(a,c){var d;return d=b.find("li"),d.removeClass("active"),d.each(function(a,b){var d;return d=$(b),d.find("a").attr("href").match(""+c+"$")?d.addClass("active"):void 0})})},controller:["$scope","$location",function(a,b){return a.$on("$locationChangeSuccess",function(){return a.$emit("pathChanged",b.path())})}]}})}.call(this),function(){var a;a=angular.module("myApp.resources",["ngResource"]),a.factory("Products",["$resource",function(a){var b;return b=a("/api/products/:id.json",{id:"@id"},{query:{method:"GET",isArray:!0},get:{method:"GET"}}),angular.extend(b.prototype,{priceWithDiscount:function(){return this.hasDiscount()?this.price*(1-this.discount/100):this.price},hasDiscount:function(){return null!=this.discount&&this.discount>0}}),b}])}.call(this),angular.module("myApp.templates",[]).run(["$templateCache",function(a){a.put("templates/other.html",'<div class="page-header"><h1>Other Controller</h1></div><p class="lead">This is a simple list of phones</p>{{other.name}}<div><button class="btn btn-info" ng-click="other.sayHello()"><i class="icon-info-sign"></i> Say hello!</button></div>'),a.put("templates/partials/alerts.html",'<aside id="alerts"><div ng-repeat="message in alertMessages" class="alert alert-{{message.type}}"><button ng-click="disposeAlert(message.id)" type="button" class="close">Ã—</button> <strong>{{message.type}}</strong> <span>{{message.text}}</span></div></aside>'),a.put("templates/products/form.html",'<div class="page-header"><h1>Product form</h1></div><form name="productForm" class="form-horizontal" ng-submit="form.save(product)" novalidate><div class="form-group" ng-class="{\'has-error\': productForm.name.$invalid && (productForm.$submitted || productForm.name.$dirty)}"><label for="product-name" class="col-lg-2 control-label">Name</label><div class="col-lg-6"><input id="product-name" type="text" class="form-control" placeholder="Enter name" name="name" ng-model="product.name" ng-required="true"><span class="help-block" ng-show="productForm.name.$invalid && (productForm.$submitted || productForm.name.$dirty)">Name is required</span></div></div><div class="form-group" ng-class="{\'has-error\': productForm.price.$invalid && (productForm.$submitted || productForm.price.$dirty)}"><label for="product-price" class="col-lg-2 control-label">Price</label><div class="col-lg-2"><div class="input-group"><span class="input-group-addon">$</span><input id="product-price" type="number" class="form-control" placeholder="Enter price" name="price" ng-model="product.price" ng-required="true"></div><span class="help-block" ng-show="productForm.price.$invalid && (productForm.$submitted || productForm.price.$dirty)">Price is required</span></div></div><div class="form-group" ng-class="{\'has-error\': productForm.discount.$invalid && (productForm.$submitted || productForm.discount.$dirty)}"><label for="product-discount" class="col-lg-2 control-label">Discount</label><div class="col-lg-2"><div class="input-group"><input id="product-discount" type="number" class="form-control" placeholder="Enter discount" name="discount" ng-model="product.discount"><span class="input-group-addon">%</span></div></div></div><div class="form-group"><label for="product-description" class="col-lg-2 control-label">Description</label><div class="col-lg-6"><textarea name="description" ng-model="product.description" class="form-control" id="product-description" rows="5"></textarea></div></div><div class="form-group"><div class="col-lg-offset-2 col-lg-6"><button type="submit" class="btn btn-success" ng-hide="product.id"><i class="icon-plus-sign"></i> Create</button> <button type="submit" class="btn btn-primary" ng-show="product.id"><i class="icon-save"></i> Update</button> <a href="" class="btn btn-danger" ng-show="product.id" ng-click="form.deleteProduct()"><i class="icon-trash"></i> Delete</a> <a href="#/products" class="btn btn-warning">Cancel</a></div></div></form>'),a.put("templates/products/index.html",'<div class="page-header"><h1>Products list</h1></div><p class="lead">This is a simple list of products</p><a href="#/products/create" class="btn btn-success"><i class="icon-plus-sign"></i> Create</a><table class="table table-hoover products" ng-show="index.products.length > 0"><thead><tr><th>#</th><th>Actions</th><th>Name</th><th>Price</th><th>Discount</th><th>Description</th><th>Created At</th></tr></thead><tbody><tr ng-repeat="product in index.products | orderBy:\'priceWithDiscount()\'" ng-class="{\'success\': product.hasDiscount()}"><td>{{product.id}}</td><td style="width: 190px"><a class="btn btn-info btn-xs" href="#/products/{{product.id}}"><i class="icon-search"></i> Show</a> <a class="btn btn-success btn-xs" href="#/products/{{product.id}}/edit"><i class="icon-edit"></i> Edit</a> <button class="btn btn-danger btn-xs" ng-click="index.deleteProduct(product)"><i class="icon-trash"></i> Delete</button></td><td>{{product.name}}</td><td>{{product.priceWithDiscount() | currency}}</td><td><span ng-show="product.hasDiscount()">{{product.discount}}%</span> <span ng-hide="product.hasDiscount()">---</span></td><td style="width: 50%">{{product.description}}</td><td style="width: 120px">{{product.createdAt | date}}</td></tr></tbody></table>'),a.put("templates/products/show.html",'<dl class="dl-horizontal"><dt>ID</dt><dd>{{product.id}}</dd><dt>Name</dt><dd>{{product.name}}</dd><dt>Headline</dt><dd>{{product.headline}}</dd><dt>Manufacturer</dt><dd>{{product.manufacturer}}</dd><dt>Price with discount</dt><dd>{{product.priceWithDiscount() | currency}}</dd><dt>Description</dt><dd>{{product.description}}</dd><dt>Created At</dt><dd>{{product.createdAt | date}}</dd></dl><div><a href="#/products/{{product.id}}/edit" class="btn btn-success"><i class="icon-edit"></i> Edit</a> <button ng-click="show.deleteProduct()" class="btn btn-danger"><i class="icon-trash"></i> Delete</button></div>'),a.put("templates/tasks.html",'<div class="page-header"><h1>Tasks List</h1></div><p class="lead">Very simple TODO list</p><span id="remaining">{{tasks.remainingTasksCount()}} of {{tasks.tasksCount()}} remaining</span>[ <a href="" class="archive" ng-click="tasks.archive()">archive</a> ]<ul id="tasks" class="icons-ul"><li ng-repeat="task in tasks.tasks | orderBy:\'done\'" class="repeat-item"><i class="icon-li icon-ok"></i><label><input type="checkbox" ng-model="task.done">&nbsp; <span ng-class="{done: task.done}">{{task.name}}</span></label></li></ul><form name="taskForm" ng-submit="tasks.addTask(task)" novalidate><div class="form-group" ng-class="{\'has-error\': taskForm.$submitted && taskForm.name.$invalid}"><label for="new-task-name">Task name</label><input id="new-task-name" type="text" class="form-control" placeholder="Enter task name" name="name" ng-model="task.name" required><span class="help-block" ng-show="taskForm.$submitted && taskForm.name.$error.required">Task name is required</span></div><div class="checkbox"><label><input type="checkbox" name="done" ng-model="task.done">Done</label></div><button type="submit" class="btn btn-primary"><i class="icon-plus-sign"></i> Add</button> <button type="button" class="btn" ng-click="tasks.reset()" ng-disabled="taskForm.$pristine"><i class="icon-remove-circle"></i> Reset</button></form>')}]),function(){var a;a=angular.module("myApp",["ngRoute","ngAnimate","myApp.templates","myApp.alerts","myApp.navigation","myApp.resources"]),a.config(["$provide",function(a){var b;return a.value("alertTimeout",3e3),b="8090"===window.location.port,b?a.value("alertTimeout",null):void 0}])}.call(this),function(){var a;a=angular.module("myApp"),a.config(["$routeProvider",function(a){return a.when("/products",{templateUrl:"templates/products/index.html",controller:"products.IndexCtrl as index",resolve:{products:["Products",function(a){return a.query().$promise}]}}).when("/products/create",{templateUrl:"templates/products/form.html",controller:"products.FormCtrl as form",resolve:{product:["Products",function(a){return new a}]}}).when("/products/:id/edit",{templateUrl:"templates/products/form.html",controller:"products.FormCtrl as form",resolve:{product:["Products","$route",function(a,b){return a.get({id:b.current.params.id}).$promise}]}}).when("/products/:id",{templateUrl:"templates/products/show.html",controller:"products.ShowCtrl as show",resolve:{product:["Products","$route",function(a,b){return a.get({id:b.current.params.id}).$promise}]}}).when("/other",{templateUrl:"templates/other.html",controller:"OtherCtrl as other"}).when("/tasks",{templateUrl:"templates/tasks.html",controller:"TasksCtrl as tasks"}).otherwise({redirectTo:"/products"})}])}.call(this),function(){var a;a=function(){function a(a,b,c,d){this.$scope=a,this.$location=b,this.alerts=c,this.product=d,this.$scope.product=this.product}return a.$inject=["$scope","$location","alerts","product"],a.prototype.save=function(a){var b,c,d=this;return this.$scope.productForm.$submitted=!0,(null!=(c=this.$scope.productForm)?c.$valid:void 0)?(b=a.$save(),b.then(function(){return d.alerts.success("Product was saved"),d.$location.path("/products")})):void 0},a.prototype.deleteProduct=function(){var a,b=this;return a=this.product.$delete(),a.then(function(){return b.alerts.info("Product was deleted"),b.$location.path("/products")})},a}(),angular.module("myApp").controller("products.FormCtrl",a)}.call(this),function(){var a;a=function(){function a(a,b){this.alerts=a,this.products=b}return a.$inject=["alerts","products"],a.prototype.deleteProduct=function(a){var b,c=this;return b=a.$delete(),b.then(function(){var b;return b=c.products.indexOf(a),-1!==b&&c.products.splice(b,1),c.alerts.info("Product was deleted")})},a}(),angular.module("myApp").controller("products.IndexCtrl",a)}.call(this),function(){var a;a=function(){function a(a,b,c,d){this.$scope=a,this.$location=b,this.alerts=c,this.product=d,this.$scope.product=this.product}return a.$inject=["$scope","$location","alerts","product"],a.prototype.deleteProduct=function(){var a,b=this;return a=this.product.$delete(),a.then(function(){return b.alerts.info("Product was deleted"),b.$location.path("/products")})},a}(),angular.module("myApp").controller("products.ShowCtrl",a)}.call(this),function(){var a;a=function(){function a(a){this.alerts=a,this.name="This is the other controller"}return a.$inject=["alerts"],a.prototype.sayHello=function(){return this.alerts.info("Hello World!")},a}(),angular.module("myApp").controller("OtherCtrl",a)}.call(this),function(){var a;a=function(){function a(a){this.$scope=a,this.tasks=[{name:"First task",done:!1},{name:"Completed task",done:!0},{name:"Second task",done:!1}],this.master={name:"",done:!1},this.reset()}return a.$inject=["$scope"],a.prototype.incompeleteTasks=function(){var a,b,c,d,e;for(d=this.tasks,e=[],b=0,c=d.length;c>b;b++)a=d[b],a.done||e.push(a);return e},a.prototype.tasksCount=function(){return this.tasks.length},a.prototype.remainingTasksCount=function(){return this.incompeleteTasks().length},a.prototype.archive=function(){return this.tasks=this.incompeleteTasks()},a.prototype.reset=function(){var a,b;return this.$scope.task=angular.copy(this.master),null!=(a=this.$scope.taskForm)&&a.$setPristine(),null!=(b=this.$scope.taskForm)?b.$submitted=!1:void 0},a.prototype.addTask=function(a){var b,c;return null!=(b=this.$scope.taskForm)&&(b.$submitted=!0),(null!=(c=this.$scope.taskForm)?c.$valid:void 0)?(this.tasks.push(angular.copy(a)),this.reset()):void 0},a}(),angular.module("myApp").controller("TasksCtrl",a)}.call(this);